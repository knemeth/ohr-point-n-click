# OHR Community Point-&-Click Adventure
# Code Style Guide
# written by kylekrack

# General Notes:
# * Write a comment at the top of every script explaining its purpose
# * Comment frequently, especially loops and slice manipulation
# * Do not use Tab characters. Indents should be 4 spaces long
# * Do not alter a script someone else has written without their knowledge & consent
# * Avoid making lines more than 80 characters long

# 1. camelCase
# When writing names of variables, scripts, or script commands, use camelCase:
# each word or abbreviation in the middle of the phrase begins with a capital 
# letter, with no intervening spaces or punctuation

plotscript, scriptName, argName, begin
    # This script does nothing, it's just a style example
    variable(heroSlice, i)
    
    heroSlice := getHeroSlice(0)
    
    for(i, 0, argName) do(
        setSliceX(heroSlice, i)
    )
end

script, anotherScript, begin
    # This script also does nothing
    variable(var1, var2)
    
    if(var1 > var2) then(
        repeatThing(var1) 
    ) else if(var1 == var2) then(
        # Special Case! Something interesting happens
        showTextbox(1)
        waitForTextbox
    ) else(
        repeatThing(var2)
    )
    
    subscript, repeatThing, argName, begin
        setSliceX(player, argName)
        if(sliceX(player) < getScreenWidth / 2) then(
            # slice on left side of screen
            horizFlipSprite(player, true)
        ) else(
            # slice on right side of screen
            horizFlipSprite(player, false)
        )
    end
end

# 2. Global Variables
# All global variables should be defined at the top of main.hss, nowhere else
# Variable IDs should be defined sequentially

globalVariable, begin
    0,player
    1,paused
    2,menuSlice
    3,mouseCursor
end

# 3. Constants
# All constants should be defined at the top of their relevant file
# A Constant should not be used outside of the file in which they are defined,
# unless it is defined in main.hss, in which case it can be used anywhere

# Constant names should use the format "type:name"
# This mirrors the constants defined in the .hsi file,
# such as "map:forest" or "hero:steve"
defineConstant, begin
    4,anim:defaultSpeed
    0,timer:animation
    1,timer:dayNight
end

# 4. Local Variables
# Define all local variables at the top of the script or subscript 
# A single script should not have "variable()" declared more than once
# Variable names should make their purpose clear. Avoid using single letter 
# or vague names unless you provide a comment block explaining each variable, 
# as below:

script, name, begin
    # Demonstrates variable naming and declaration
    variable(var1, var2, var3) # Define all variables for this script here
    # var1 == player's x value in pixels
    # var2 == player's y value in pixels
    # var3 == sum of the player's x and y values
    
    var1 := sliceX(player)
    var2 := sliceY(player)
    # variable(var3) # Don't do this!!
    
    var3 := var1 + var2
    exitReturning(var3 > 0)
end

# 5. If, Then, Else...
# An if statement can be written on a single line if it only contains one
# command/line, for example:
# if(x > 0) then(exitScript)
# Otherwise, if, then, else blocks should follow the style below:

script, yetAnotherScript, begin
    # Shows how to format ifs, elseifs, and elses
    if(sliceX(player) < 0) then(
        setSliceX(player, 0)
    ) elseif(sliceX(player) > mapWidth--1) then(
        setSliceX(player, mapWidth -- 1 -- sliceWidth(player))
    ) else(
        showTextbox(2)
        waitForTextbox
    )
end

# 6. Multi-line Conditionals
# When an if statement has multiple conditions that go beyond 80 characters,
# make a new line before each &&, ||, or ^^
# Indent as below:

script, lotsOfConditions, argName, begin
    # Shows what to do when an if has many lines
    if(abs(argName) -- abs(sliceX(player) + sliceY(player)) > 0
       && sliceX(player) > 0
       && sliceY(player) > 0
    ) then(
        # Do something, too lazy to determine what
    )
end

# 7. Nested Indents
# When an if, for, switch, etc. block exists inside another, the close bracket
# should be in the same column as the first character of the initial statement
# See below:

script, nesting, begin
    # How to nest loops and ifs
    variable(x, y)
    
    for(x, 0, mapWidth--1) do(
        for(y, 0, mapHeight--1) do(
            # Do some stuff on each tile
            if(readMapBlock(x, y, 0) == 0) then(
                writePassBlock(x, y, 0)
            ) else(
                writePassBlock(x, y, northwall+southwall+eastwall+westwall)
            )
        )
    )
end