# OHR Community Point & Click Adventure
# movement.hss
# file created by kylekrack
# Has scripts for moving the hero

script, clickMovePlayer, x, y, begin
    # Called from lmbDownActions() in ui.hss
    # Moves the player towards the target location
    # Will not pathfind around walls, simply move towards the target
    #movePlayer(x, y)
    # Create a circle marker at the destination
    if(destinationMarker) then(freeSlice(destinationMarker))
    destinationMarker := loadWalkaboutSprite(3)
    createAnimation(destinationMarker, -1, 3)
    putSlice(destinationMarker, mousePixelX--(sliceWidth(destinationMarker)/2), mousePixelY--(sliceHeight(destinationMarker)/2))
end

script, movePlayer, x, y, begin
    # Called from main loop in main.hss
    # Moves the player towards a target destination by move:speed pixels
    variable(horiz, vert)
    # Set moving left or right
    if(x < 0) then(horiz := 0--move:speed) # moving left
    elseif(x > 0) then(horiz := move:speed) # moving right
    # Otherwise, horiz is 0
    if(y < 0) then(vert := 0--move:speed) # moving up
    elseif(y > 0) then(vert := move:speed) # moving down
    # Otherwise, vert is 0
    if(horiz <> 0 && vert <> 0) then(
        # Moving diagonally, 3/4 speed
        horiz := (horiz * 3) / 4
        vert := (vert * 3) / 4
    )
    # Don't overstep value
    if(abs(x) -- abs(horiz) < 0) then(horiz := x)
    if(abs(y) -- abs(vert) < 0) then(vert := y)
    # Update hero direction
    if(vert < 0) then(setHeroDirection(me, up))
    elseif(vert > 0) then(setHeroDirection(me, down))
    elseif(horiz < 0) then(setHeroDirection(me, left))
    elseif(horiz > 0) then(setHeroDirection(me, right))

    moveSliceWithWallchecking(getHeroSlice(me), horiz, vert, move:friction)
    updateNPCOrHeroFromSlice(getHeroSlice(me)) # Uses putHero to force player in right spot
end

script, updateNpcOrHeroFromSlice, sl, begin
    # Uses putHero to force an NPC or Hero to be on the correct position
    # as their slice dictates
    variable (who)
    
    who := heroRankFromSlice(sl)
    if (who > -1) then (putHero(who, sliceX(sl), sliceY(sl)))
    who := npcReferenceFromSlice(sl)
    if (who <> 0) then (putNpc(who, sliceX(sl), sliceY(sl)))
end